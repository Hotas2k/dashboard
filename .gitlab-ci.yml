variables:
  NODE_VERSION: "16.13.0"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  NAMESPACE: "internal"
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"
  PROVISIONING_NAME: "dashboard"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - node_modules

stages:
  - dependencies
  - graphql
  - test
  - build
  - docker
  - deploy

dependencies:install:
  stage: dependencies
  image: node:$NODE_VERSION
  script:
    - yarn --frozen-lockfile
  artifacts:
    expire_in: 1 hour
    paths:
      - node_modules
  tags:
    - docker

graphql:generate:
  stage: graphql
  image: node:$NODE_VERSION
  cache: {}
  dependencies:
    - dependencies:install
  script:
    - yarn graphql:generate
  artifacts:
    expire_in: 1 hour
    paths:
      - src/api/graphql.ts
  tags:
    - docker

test:lint:
  stage: test
  image: node:$NODE_VERSION
  cache: {}
  dependencies:
    - dependencies:install
    - graphql:generate
  script:
    - yarn npm-run-all eslint:report prettier:report stylelint:report typescript:report
  tags:
    - docker

docker:staging:
  stage: docker
  image: docker:20.10.16
  dependencies:
    - graphql:generate
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build . -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
      --build-arg DOCKER_ENVIRONMENT=staging
      --build-arg CI_PIPELINE_IID=$CI_PIPELINE_IID
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
  services:
    - docker:20.10.16-dind
  needs:
    - graphql:generate
    - test:lint
  tags:
    - docker

docker:production:
  stage: docker
  image: docker:20.10.16
  dependencies:
    - graphql:generate
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build . -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
      --build-arg DOCKER_ENVIRONMENT=production
      --build-arg CI_PIPELINE_IID=$CI_PIPELINE_IID
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
  services:
    - docker:20.10.16-dind
  needs:
    - graphql:generate
    - test:lint
  tags:
    - docker
  only:
    - master

deploy:staging:
  stage: deploy
  image:
    name: alpine/k8s:1.21.2
    entrypoint: [""]
  script:
    - chmod go-r $KUBECONFIG_STAGING
    - export KUBECONFIG=$KUBECONFIG_STAGING
    - cd provisioning/overlays/staging;
    - kustomize edit set image image=${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
    - kubectl diff -k ./ || true
    - kubectl label configMaps -n $NAMESPACE -l currently-used-by-kustomize="true" --overwrite currently-used-by-kustomize="false"
    - kubectl apply -k ./
    - kubectl -n $NAMESPACE rollout status deployment/${PROVISIONING_NAME}
    - kubectl delete configMaps -n $NAMESPACE -l currently-used-by-kustomize="false"
  tags:
    - docker
  environment:
    name: frontend
    url: https://$ENTIRE_HOSTNAME_STAGING
  needs:
    - docker:staging
  only:
    - develop

deploy:production:
  stage: deploy
  image:
    name: alpine/k8s:1.21.2
    entrypoint: [""]
  script:
    - chmod go-r $KUBECONFIG_PRODUCTION
    - export KUBECONFIG=$KUBECONFIG_PRODUCTION
    - cd provisioning/overlays/production;
    - kustomize edit set image image=${CI_REGISTRY_IMAGE}:${CI_PIPELINE_IID}
    - kubectl diff -k ./ || true
    - kubectl label configMaps -n $NAMESPACE -l currently-used-by-kustomize="true" --overwrite currently-used-by-kustomize="false"
    - kubectl apply -k ./
    - kubectl -n $NAMESPACE rollout status deployment/${PROVISIONING_NAME}
    - kubectl delete configMaps -n $NAMESPACE -l currently-used-by-kustomize="false"
  tags:
    - docker
  environment:
    name: frontend
    url: https://$ENTIRE_HOSTNAME_PRODUCTION
  needs:
    - docker:production
  only:
    - master
